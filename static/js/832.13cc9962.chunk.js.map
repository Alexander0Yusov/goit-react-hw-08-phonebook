{"version":3,"file":"static/js/832.13cc9962.chunk.js","mappings":"0LACA,MAA2B,2BAA3B,EAA8D,wBCA9D,EAA2B,6BAA3B,EAA4G,8BAA5G,EAAkJ,0BAAlJ,EAAiT,+BAAjT,EAA8X,8B,+ECQxXA,EAAeC,EAAAA,KAAaC,MAAM,CACtCC,KAAMF,EAAAA,KACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,4BACZC,MAAON,EAAAA,KACJM,MAAM,iBACND,SAAS,6BACTE,QAAQ,sCAAuC,qBAClDC,SAAUR,EAAAA,KACPG,IAAI,GACJE,SAAS,gCACTE,QACC,iEACA,0FAgHN,EA5GmB,WACjB,IAAQE,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,IAAtBF,MACFG,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACRL,GAASM,MAAMN,GACfG,GAASI,EAAAA,EAAAA,GAAS,MACnB,GAAE,CAACP,EAAOG,IAcX,OACE,SAAC,KAAD,CACEK,cAAe,CACbf,KAAM,GACNI,MAAO,GACPE,SAAU,IAEZU,iBAAkBnB,EAClBoB,SApBiB,SAAC,EAAD,GAA+C,IAA5CjB,EAA2C,EAA3CA,KAAMI,EAAqC,EAArCA,MAAOE,EAA8B,EAA9BA,SAAcY,EAAgB,EAAhBA,UACjDR,GACES,EAAAA,EAAAA,IAAY,CACVnB,KAAAA,EACAI,MAAAA,EACAE,SAAAA,KAGJY,IACAE,QAAQC,IAAI,KACb,EAGC,SASG,gBACCC,EADD,EACCA,OACAC,EAFD,EAECA,OACAC,EAHD,EAGCA,QACAC,EAJD,EAICA,aACAC,EALD,EAKCA,gBACAC,EAND,EAMCA,QACAC,EAPD,EAOCA,aAPD,OASC,kBACEX,SAAUW,EACVC,UAAWC,EACXC,aAAa,MAHf,WAKE,mBAAOF,UAAWC,EAAlB,WACE,SAAC,KAAD,CACE9B,KAAK,OACLgC,MAAM,2BACN7B,UAAQ,EACR0B,UAAWC,EACXG,YAAY,OACZC,MAAOZ,EAAOtB,KACdmC,aAAcV,EAAa,QAC3BW,OAAQ,kBAAMV,EAAgB,OAAtB,IAETH,EAAOvB,MAAQwB,EAAQxB,OACtB,cAAGqC,MAAO,CAAEC,OAAQ,GAAKT,UAAWC,EAApC,SACGP,EAAOvB,WAKd,mBAAO6B,UAAWC,EAAlB,WACE,SAAC,KAAD,CACE9B,KAAK,QACLgC,MAAM,uBACN7B,UAAQ,EACR0B,UAAWC,EACXG,YAAY,QACZC,MAAOZ,EAAOlB,MACd+B,aAAcV,EAAa,SAC3BW,OAAQ,kBAAMV,EAAgB,QAAtB,IAETH,EAAOnB,OAASoB,EAAQpB,QACvB,cAAGiC,MAAO,CAAEC,OAAQ,GAAKT,UAAWC,EAApC,SACGP,EAAOnB,YAId,mBAAOyB,UAAWC,EAAlB,WACE,SAAC,KAAD,CACE9B,KAAK,WACLgC,MAAM,0BACN7B,UAAQ,EACR0B,UAAWC,EACXG,YAAY,WACZC,MAAOZ,EAAOhB,SACd6B,aAAcV,EAAa,YAC3BW,OAAQ,kBAAMV,EAAgB,WAAtB,IAETH,EAAOjB,UAAYkB,EAAQlB,WAC1B,cAAG+B,MAAO,CAAEC,OAAQ,GAAKT,UAAWC,EAApC,SACGP,EAAOjB,eAMd,mBAAQuB,UAAWC,EAAgBS,KAAK,SAASC,UAAWb,EAA5D,SACG,aArEN,GA2EN,ECzHD,EATiB,WACf,OACE,iBAAKE,UAAWC,EAAhB,WACE,eAAID,UAAWC,EAAf,SAA0B,YAC1B,SAAC,EAAD,MAGL,C","sources":["webpack://goit-react-hw-08-phonebook/./src/pages/Register/Register.module.css?12fc","webpack://goit-react-hw-08-phonebook/./src/components/FormSignUp/FormSignUp.module.css?53a5","components/FormSignUp/FormSignUp.jsx","pages/Register/Register.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"register\":\"Register_register__H6uKZ\",\"title\":\"Register_title__4r11G\"};","// extracted by mini-css-extract-plugin\nexport default {\"authForm\":\"FormSignUp_authForm__P3QQP\",\"iconSpan\":\"FormSignUp_iconSpan__I26O9\",\"formLabel\":\"FormSignUp_formLabel__kHoyc\",\"input\":\"FormSignUp_input__Gr-pz\",\"imageLabel\":\"FormSignUp_imageLabel__vNvlM\",\"icon\":\"FormSignUp_icon__+AMiq\",\"imageInput\":\"FormSignUp_imageInput__qjZxR\",\"authButton\":\"FormSignUp_authButton__ejKU-\",\"photo\":\"FormSignUp_photo__G3LH4\",\"errorText\":\"FormSignUp_errorText__LjCen\"};","import css from './FormSignUp.module.css';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { signUpThunk } from 'redux/authService/thunks';\nimport { setError } from 'redux/authService/authSlice';\nimport { authSelector } from 'redux/stateSelectors';\n\nconst signupSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Enter Your name, please!'),\n  email: Yup.string()\n    .email('Invalid email')\n    .required('Enter Your email, please!')\n    .matches(/^[\\w.-]+@[a-zA-Z_]+?.[a-zA-Z]{2,3}$/, 'Enter valid email'),\n  password: Yup.string()\n    .min(7)\n    .required('Enter Your password, please!')\n    .matches(\n      /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{4,}$/,\n      'At least: one uppercase letter, one lowercase letter, one number, one special symbol'\n    ),\n});\n\nconst FormSignUp = () => {\n  const { error } = useSelector(authSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    error && alert(error);\n    dispatch(setError(null));\n  }, [error, dispatch]);\n\n  const handleSubmit = ({ name, email, password }, { resetForm }) => {\n    dispatch(\n      signUpThunk({\n        name,\n        email,\n        password,\n      })\n    );\n    resetForm();\n    console.log('hi');\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        email: '',\n        password: '',\n      }}\n      validationSchema={signupSchema}\n      onSubmit={handleSubmit}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        setFieldTouched,\n        isValid,\n        handleSubmit,\n      }) => (\n        <form\n          onSubmit={handleSubmit}\n          className={css.authForm}\n          autoComplete=\"off\"\n        >\n          <label className={css.formLabel}>\n            <Field\n              name=\"name\"\n              title=\"Enter Your Name, please!\"\n              required\n              className={css.input}\n              placeholder=\"Name\"\n              value={values.name}\n              onChangeText={handleChange('name')}\n              onBlur={() => setFieldTouched('name')}\n            />\n            {errors.name && touched.name && (\n              <p style={{ margin: 4 }} className={css.errorText}>\n                {errors.name}\n              </p>\n            )}\n          </label>\n\n          <label className={css.formLabel}>\n            <Field\n              name=\"email\"\n              title=\"Enter email, please!\"\n              required\n              className={css.input}\n              placeholder=\"email\"\n              value={values.email}\n              onChangeText={handleChange('email')}\n              onBlur={() => setFieldTouched('email')}\n            />\n            {errors.email && touched.email && (\n              <p style={{ margin: 4 }} className={css.errorText}>\n                {errors.email}\n              </p>\n            )}\n          </label>\n          <label className={css.formLabel}>\n            <Field\n              name=\"password\"\n              title=\"Enter password, please!\"\n              required\n              className={css.input}\n              placeholder=\"password\"\n              value={values.password}\n              onChangeText={handleChange('password')}\n              onBlur={() => setFieldTouched('password')}\n            />\n            {errors.password && touched.password && (\n              <p style={{ margin: 4 }} className={css.errorText}>\n                {errors.password}\n              </p>\n            )}\n          </label>\n\n          {/* стили менять тернарником */}\n          <button className={css.authButton} type=\"submit\" disabled={!isValid}>\n            {'SignUp'}\n          </button>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nexport default FormSignUp;\n","import css from './Register.module.css';\nimport FormSignUp from 'components/FormSignUp/FormSignUp';\n\nconst Register = () => {\n  return (\n    <div className={css.register}>\n      <h2 className={css.title}>SignUp</h2>\n      <FormSignUp />\n    </div>\n  );\n};\n\nexport default Register;\n"],"names":["signupSchema","Yup","shape","name","min","max","required","email","matches","password","error","useSelector","authSelector","dispatch","useDispatch","useEffect","alert","setError","initialValues","validationSchema","onSubmit","resetForm","signUpThunk","console","log","values","errors","touched","handleChange","setFieldTouched","isValid","handleSubmit","className","css","autoComplete","title","placeholder","value","onChangeText","onBlur","style","margin","type","disabled"],"sourceRoot":""}